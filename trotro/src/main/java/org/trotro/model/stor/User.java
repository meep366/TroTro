// Generated by dez2hibernate
package org.trotro.model.stor;

import org.springframework.security.GrantedAuthority;
import org.springframework.security.providers.encoding.ShaPasswordEncoder;
import org.springframework.security.userdetails.UserDetails;

import java.io.Serializable;
import java.util.HashSet;
import java.util.Set;


public class User implements Serializable, UserDetails {
      
    private static final long serialVersionUID = -6780292220339146337L;
	
	private String USR_ID;
    private String USR_LOGIN;
    private String USR_PASSWD;
    private boolean USR_NON_EXPIRED;
    private boolean USR_NON_LOCKED;
    private boolean USR_CREDENTIALS_NON_EXPIRED;
    private boolean USR_ENABLED;
    
    private String newPassword;
    private String newPasswordConfirm;

    Set<Role> roles = new HashSet<Role>();
        
    public User() 
    {
        super();
        
        this.USR_NON_EXPIRED = true;
        this.USR_NON_LOCKED = true;
        this.USR_CREDENTIALS_NON_EXPIRED = true;
        this.USR_ENABLED = true;
    }          
        
    public void setUSR_ID ( String USR_ID )
    {
        this.USR_ID = USR_ID;
    }

    public String getUSR_ID ( ) 
    {
        return this.USR_ID;
    }
      
    public void setUSR_LOGIN ( String USR_LOGIN )
    {
        this.USR_LOGIN = USR_LOGIN;
    }

    public String getUSR_LOGIN ( ) 
    {
        return this.USR_LOGIN;
    }
      
    public void setUSR_PASSWD ( String USR_PASSWD )
    {
        this.USR_PASSWD = USR_PASSWD;
    }

    public String getUSR_PASSWD ( ) 
    {
        return this.USR_PASSWD;
    }
      
    public boolean setNewSHAEncodedPassword ( String newPassword, String newPasswordConfirm )
    {
    	boolean result = false;
    	
    	if ((newPassword.equals(newPasswordConfirm)) &&
    		!newPassword.equals(""))
    	{
    		ShaPasswordEncoder encoder = new ShaPasswordEncoder();
    		USR_PASSWD = encoder.encodePassword(newPassword, null);
    		result = true;
    	}
    	
    	return result;
    }
    
    public void setNewPassword ( String newPassword )
    {
        this.newPassword = newPassword;
    }

    public String getNewPassword ( ) 
    {
        return this.newPassword;
    }
      
    public void setNewPasswordConfirm ( String newPasswordConfirm )
    {
        this.newPasswordConfirm = newPasswordConfirm;
    }

    public String getNewPasswordConfirm ( ) 
    {
        return this.newPasswordConfirm;
    }
      
	public boolean isAccountNonExpired()
	{
		return this.USR_NON_EXPIRED;
	}

	public boolean isAccountNonLocked() 
	{
		return this.USR_NON_LOCKED;
	}

	public GrantedAuthority[] getAuthorities() 
	{
		int numberOfRoles = this.roles.size();
		
		GrantedAuthority[] authorities = 
			new GrantedAuthority[numberOfRoles];
		Object[] roles = this.roles.toArray();
		for (int i=0;i<numberOfRoles;i++)
			authorities[i] = (Role)roles[i];
			
		return authorities;
	}

	public boolean isCredentialsNonExpired() 
	{
		return this.USR_CREDENTIALS_NON_EXPIRED;
	}

	public boolean isEnabled() 
	{
		return this.USR_ENABLED;
	}

	public String getPassword() 
	{
		return this.getUSR_PASSWD();
	}

	public String getUsername() 
	{
		return this.getUSR_LOGIN();
	}

	public Set<Role> getRoles() 
	{
		return roles;
	}

	public void setRoles(Set<Role> roles) 
	{
		this.roles = roles;
	}

	public boolean isUSR_CREDENTIALS_NON_EXPIRED() {
		return USR_CREDENTIALS_NON_EXPIRED;
	}

	public void setUSR_CREDENTIALS_NON_EXPIRED(boolean usr_credentials_non_expired) {
		this.USR_CREDENTIALS_NON_EXPIRED = usr_credentials_non_expired;
	}

	public boolean isUSR_ENABLED() {
		return USR_ENABLED;
	}

	public void setUSR_ENABLED(boolean usr_enabled) {
		this.USR_ENABLED = usr_enabled;
	}

	public boolean isUSR_NON_EXPIRED() {
		return USR_NON_EXPIRED;
	}

	public void setUSR_NON_EXPIRED(boolean usr_non_expired) {
		this.USR_NON_EXPIRED = usr_non_expired;
	}

	public boolean isUSR_NON_LOCKED() {
		return USR_NON_LOCKED;
	}

	public void setUSR_NON_LOCKED(boolean usr_non_locked) {
		this.USR_NON_LOCKED = usr_non_locked;
	}  
}      
      
    